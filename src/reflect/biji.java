package reflect;

public class biji {
	/**
	 * 
	 * Java 反射机制
	 *  	要想深入理解反射原理，首先要了解什么是类型信息。java让我们在运行时识别对象的类的信息，主要有两种方式
	 *  主要有两种方式：一种是传统的RTTI,他假定我们在编译时已经知道了所有的类型信息；另一种是反射机制，它允许我们
	 *  在运行时发现和使用类的信息。
	 * 
	 *  1.	Class对象
	 *  	理解RTTI在java中的工作原理，首先需要知道类型信息在运行时是如何表示的，这是由Class对象来完成的，它包含
	 *    了与类有关的信息。Class对象就是用来创建所有的常规对象，Java使用Class对象来执行RTTI,即使你正在执行的是
	 *    类似类型转换这样的操作。
	 *    
	 *    	每个类都会产生一个对应的Class对象，也就是保存在.class文件。所有类都是在对其第一次使用时动态加载到jvm的
	 *    当程序创造一个对类的静态成员的引用时，就会加载这个类。Class对象仅在需要的时候才会加载，static初始化是在类
	 *    加载时进行的。
	 *   
	 *  	
	 *  		
	 *  
	 *  
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 */
}
